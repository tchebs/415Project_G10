In order to implement segmentation using expectation maximization, we decided to make use of the implementation from sklearn.mixture.GaussianMixture. First, both the raw images and the given segmented images are loaded using glob to get all the filenames and then cv2.imread to load the images. Next, in order to run the segmentation, we create a GaussianMixture object with the following parameters: n_components = 2, covariance_type = 'full', n_init = 3, tol = 1e-5. These parameters were found by testing different values and observing the output of the cross validation. Once the EM algorithm is completed, we have a binary mask. However, because the pixels will not always receive the same label, we need to make sure the foreground flower is labeled 1 and the background is labeled 0. To achieve this, the segmented images are modified by calculating the standard deviation of the position of the pixels in each group. The group with the smaller standard deviation is assumed to be the foreground and the image is modified accordingly. This works because the flower in the foreground is usually one large group of pixels while the background is around the edges. As such, the pixels of the flower will, on average, be closer to the mean position of the segment, which is the definition of lower standard deviation. Cross validation is then performed by simply dividing the image set into groups of 5 and then computes the statistics of section 6.1 for each group. The results are returned in arrays and the averages can be computed easily using np.mean.

The expectation maximization algorithm resulted in a fairly strong result, as we can see intuitively from the images and from the cross validation numbers. We were able to achieve an average DICE coefficient of 0.8223 with a standard deviation of 0.1191. This shows that the accuracy of our segmentation quite good on average and it is quite consistent. The lowest value we observed was 0.4964, which shows that there are certainly situations in which this algorithm does not perform well but they are relatively rare. The maximum value was 0.9630, which shows that this algorithm performs extremely well on certain images which are presumably easier to segment by color. For example, a flower with a consistently red color on a green background will be segemented more effectively by this method than a flower with green, purple, and blue on a green background. 